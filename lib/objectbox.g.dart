// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/models/contact_model.dart';
import 'data/models/user_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 6377715857786919868),
      name: 'ContactModel',
      lastPropertyId: const obx_int.IdUid(2, 671084407465150616),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6747143768422524094),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 671084407465150616),
            name: 'address',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 122111734487620448),
      name: 'UserModel',
      lastPropertyId: const obx_int.IdUid(6, 5720481686052608034),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2740337565566816305),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4808733866466365598),
            name: 'username',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1948306391942539678),
            name: 'passcode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4134954314985662512),
            name: 'logged',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8826984033369877482),
            name: 'privateKey',
            type: 27,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5720481686052608034),
            name: 'publicKey',
            type: 27,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 4163491123646389794),
            name: 'contacts',
            targetId: const obx_int.IdUid(1, 6377715857786919868))
      ],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 122111734487620448),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(1, 4163491123646389794),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    ContactModel: obx_int.EntityDefinition<ContactModel>(
        model: _entities[0],
        toOneRelations: (ContactModel object) => [],
        toManyRelations: (ContactModel object) => {},
        getId: (ContactModel object) => object.id,
        setId: (ContactModel object, int id) {
          object.id = id;
        },
        objectToFB: (ContactModel object, fb.Builder fbb) {
          final addressOffset = fbb.writeString(object.address);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, addressOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final addressParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = ContactModel(id: idParam, address: addressParam);

          return object;
        }),
    UserModel: obx_int.EntityDefinition<UserModel>(
        model: _entities[1],
        toOneRelations: (UserModel object) => [],
        toManyRelations: (UserModel object) =>
            {obx_int.RelInfo<UserModel>.toMany(1, object.id): object.contacts},
        getId: (UserModel object) => object.id,
        setId: (UserModel object, int id) {
          object.id = id;
        },
        objectToFB: (UserModel object, fb.Builder fbb) {
          final usernameOffset = fbb.writeString(object.username);
          final passcodeOffset = fbb.writeString(object.passcode);
          final privateKeyOffset = fbb.writeListInt64(object.privateKey);
          final publicKeyOffset = fbb.writeListInt64(object.publicKey);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, usernameOffset);
          fbb.addOffset(2, passcodeOffset);
          fbb.addBool(3, object.logged);
          fbb.addOffset(4, privateKeyOffset);
          fbb.addOffset(5, publicKeyOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final usernameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final passcodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final privateKeyParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGet(buffer, rootOffset, 12, []);
          final publicKeyParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGet(buffer, rootOffset, 14, []);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final loggedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final object = UserModel(
              username: usernameParam,
              passcode: passcodeParam,
              privateKey: privateKeyParam,
              publicKey: publicKeyParam,
              id: idParam,
              logged: loggedParam);
          obx_int.InternalToManyAccess.setRelInfo<UserModel>(object.contacts,
              store, obx_int.RelInfo<UserModel>.toMany(1, object.id));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ContactModel] entity fields to define ObjectBox queries.
class ContactModel_ {
  /// See [ContactModel.id].
  static final id =
      obx.QueryIntegerProperty<ContactModel>(_entities[0].properties[0]);

  /// See [ContactModel.address].
  static final address =
      obx.QueryStringProperty<ContactModel>(_entities[0].properties[1]);
}

/// [UserModel] entity fields to define ObjectBox queries.
class UserModel_ {
  /// See [UserModel.id].
  static final id =
      obx.QueryIntegerProperty<UserModel>(_entities[1].properties[0]);

  /// See [UserModel.username].
  static final username =
      obx.QueryStringProperty<UserModel>(_entities[1].properties[1]);

  /// See [UserModel.passcode].
  static final passcode =
      obx.QueryStringProperty<UserModel>(_entities[1].properties[2]);

  /// See [UserModel.logged].
  static final logged =
      obx.QueryBooleanProperty<UserModel>(_entities[1].properties[3]);

  /// See [UserModel.privateKey].
  static final privateKey =
      obx.QueryIntegerVectorProperty<UserModel>(_entities[1].properties[4]);

  /// See [UserModel.publicKey].
  static final publicKey =
      obx.QueryIntegerVectorProperty<UserModel>(_entities[1].properties[5]);

  /// see [UserModel.contacts]
  static final contacts = obx.QueryRelationToMany<UserModel, ContactModel>(
      _entities[1].relations[0]);
}
